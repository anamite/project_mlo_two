from groq import Groq

client = Groq(api_key='None')
def ask_ai(input):
    completion = client.chat.completions.create(
        model="openai/gpt-oss-120b",
        messages=[
            {"role": "system", "content": "You are a helpful assistant. Give brief, conversational responses. "
                                          "limit to 3 to 5 words as possible. You must respond as humanly as "
                                          "possible, add 'mmm', 'haa' 'Aahh' kind of filling sounds as "
                                          "necessary to make it sound natural, keep answers straig to the "
                                          "question and simple.Continue the converation only if you really "
                                          "expect the user to say something.. for straigt answer questions "
                                          "you dont need to. If you call tools, maybe you can let them know what you are doing.."
                                          "Expected tool from system: set_alarm , input variable: time(hh:mm)"
                                          "send_email, input variable: recipient, subject, body"
                                          "create_event, input variable: date(yyyy-mm-dd), title"
                                          "get_weather, input variable: location"
             },
            {
                "role": "user",
                "content": input,
            }
        ],
        temperature=1,
        max_completion_tokens=8192,
        top_p=1,
        reasoning_effort="medium",
        stream=False,
        response_format={
            "type": "json_schema",
            "json_schema": {
                "name": "ai_assistant_response",
                "schema": {
                    "type": "object",
                    "properties": {
                        "message": {
                            "type": "string",
                            "description": "The main response message to the user"
                        },
                        "tool_call": {
                            "type": "object",
                            "properties": {
                                "tool_name": {
                                    "type": "string",
                                    "description": "Name of the tool being called"
                                },
                                "input_variables": {
                                    "type": "object",
                                    "description": "Key-value pairs of input variables and their values",
                                    "additionalProperties": True
                                }
                            },
                            "required": ["tool_name", "input_variables"]
                        },
                        "continue_conversation": {
                            "type": "boolean",
                            "description": "Whether to continue the conversation (true) or end it (false)"
                        }
                    },
                    "required": ["message", "continue_conversation"],
                    "additionalProperties": False
                }
            }
        }
    )
    return completion.choices[0].message


import json

# Define available tools and their required input parameters
TOOLS = {
    "set_alarm": {"time"},
    "send_email": {"recipient", "subject", "body"},
    "create_event": {"date", "title"},
    "get_weather": {"location"}
}

def validate_tool_call(tool_call):
    if not tool_call:
        return False, "No tool_call found"
    tool_name = tool_call.get("tool_name")
    input_vars = tool_call.get("input_variables", {})
    if tool_name not in TOOLS:
        return False, f"Unknown tool: {tool_name}"
    required_params = TOOLS[tool_name]
    missing = required_params - set(input_vars.keys())
    if missing:
        return False, f"Missing parameters: {missing}"
    return True, "Tool call is valid"

def check_ai_response(response):
    try:
        # If response is a ChatCompletionMessage, extract content
        if hasattr(response, "content"):
            data = json.loads(response.content)
        else:
            data = json.loads(response)
    except Exception as e:
        return False, f"JSON parsing error: {e}"

    tool_call = data.get("tool_call")
    valid, msg = validate_tool_call(tool_call)
    return valid, msg

# Example usage:
# valid, msg = check_ai_response(completion.choices[0].message)
# print(valid, msg)
#
# print(completion.choices[0].message)
while True: # take input in a loop
    user_input = input("User: ")
    response = ask_ai(user_input) # example output:completion.choices[0].message =  ChatCompletionMessage(content='{"message":"mmm, reminder set.","continue_conversation":false,"tool_call":{"tool_name":"set_alarm","input_variables":{"time":"15:00"}}}', role='assistant', executed_tools=None, function_call=None, reasoning='We need to respond with JSON according to schema ai_assistant_response. Must include required fields: message (string) and continue_conversation (boolean). Optionally tool_call if we are calling a tool. The user wants reminder at 3 PM to call John. That\'s setting an alarm? The tool set_alarm expects input variable time (hh:mm). So we should call set_alarm with time "15:00". Provide message maybe "Sure, reminder set." Continue_conversation probably false? The user likely doesn\'t need further conversation. The instructions: "Continue the conversation only if you really expect the user to say something.. for straight answer questions you dont need to." Here we set alarm; maybe no need to continue. So continue_conversation false. Provide tool_call with tool_name "set_alarm" and input_variables {"time":"15:00"}.\n\nMessage: maybe "Got it, will remind you." but per developer instruction earlier (the first instruction) says give brief, conversational responses limited to 3-5 words, with filler sounds. However the final instruction overrides with JSON. The JSON\'s message field is the main response message to the user. We should keep it short, maybe "mmm, reminder set." That\'s 3 words plus filler. That fits.\n\nReturn JSON only.\n\nCheck schema: properties: continue_conversation (boolean), message (string), tool_call (object). tool_call requires tool_name and input_variables. So include tool_call.\n\nConstruct JSON compact: {"message":"mmm, reminder set.","continue_conversation":false,"tool_call":{"tool_name":"set_alarm","input_variables":{"time":"15:00"}}}\n\nCheck no extra fields.\n\nReturn only that.', tool_calls=None)
    # parse the json
    print(f"AI: {response.content}")
    valid, msg = check_ai_response(response)
    print("Valid:", valid, "Message:", msg)
